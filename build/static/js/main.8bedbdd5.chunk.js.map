{"version":3,"sources":["config/url.js","services/UserServices.js","reducers/types.js","components/Users/Users.js","actions/UsersAction.js","components/Login/Login.js","components/App/App.js","serviceWorker.js","store/state.js","reducers/Users.js","reducers/index.js","store/index.js","index.js"],"names":["URL","getUsers","a","fetch","response","json","addUser","user","body","JSON","stringify","method","headers","updateUser","id","deleteUser","checkUser","emailId","pwd","types","LOAD_USERS","$","require","DataTable","Users","useState","modelType","setModelType","updateId","setUpdateId","inputEl","useRef","modelRef","history","useHistory","dispatch","useDispatch","useForm","handleSubmit","register","errors","watch","setValue","users","useSelector","state","usersReducer","shallowEqual","fetchUsers","then","res","type","payload","current","useEffect","window","localStorage","getItem","push","openHideModal","modal","className","href","onClick","removeItem","ref","map","i","key","userName","age","gender","email","phoneNumber","data","x","updateOpenModel","confirm","alert","onSubmit","values","cpassword","autoComplete","data-dismiss","htmlFor","name","required","min","value","message","max","pattern","minLength","maxLength","password","validate","Login","length","setItem","App","path","Boolean","location","hostname","match","initialState","action","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8bedbdd5.chunk.js","sourcesContent":["export const URL = {\n    API_ENDPOINT: 'http://localhost:4000'\n}","import { URL } from \"../config/url\";\n\n/**\n * get user\n */\nconst getUsers = async () => {\n    const response = await fetch(`${URL.API_ENDPOINT}/users/`);\n    return response.json();\n}\n\n/**\n * Add user\n * @param {*} user \n */\nconst addUser = async (user) => {\n    const response = await fetch(`${URL.API_ENDPOINT}/users`, {\n        body: JSON.stringify(user),\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    });\n    return response.json();\n}\n\n/**\n * Update user\n * @param {*} user \n * @param {*} id \n */\nconst updateUser = async (user, id) => {\n    const response = await fetch(`${URL.API_ENDPOINT}/users/${id}`, {\n        body: JSON.stringify(user),\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    });\n    return response.json();\n}\n\n/**\n * delete user\n * @param {*} id \n */\nconst deleteUser = async (id) => {\n    const response = await fetch(`${URL.API_ENDPOINT}/users/${id}`, {\n        method: 'DELETE'\n    });\n    return response.json();\n}\n\n/**\n * check user\n * @param {*} emailId \n * @param {*} pwd \n */\nconst checkUser = async (emailId,pwd) => {\n    const response = await fetch(`${URL.API_ENDPOINT}/users?email=${emailId}&password=${pwd}`);\n    return response.json();\n}\n\nexport {\n    getUsers,\n    addUser,\n    updateUser,\n    deleteUser,\n    checkUser\n};","const types = {\n    LOAD_USERS: \"LOAD_USERS\",\n}\n\nexport default types;","import React, {\n  useEffect,\n  useRef,\n  useState\n} from 'react';\n\nimport {\n  useHistory\n} from \"react-router-dom\";\n\nimport {\n  useSelector,\n  useDispatch,\n  shallowEqual\n} from 'react-redux';\n\nimport {\n  getUsers,\n  addUser,\n  updateUser,\n  deleteUser\n} from \"../../services/UserServices\";\n\nimport {\n  useForm\n} from \"react-hook-form\";\n\nimport {\n  loadUsers\n} from \"../../actions/UsersAction\";\n\nimport './Users.css';\nconst $ = require('jquery');\n$.DataTable = require('datatables.net');\n/**\n * Users\n */\nfunction Users() {\n\n  const [ modelType, setModelType ] = useState('Add');\n  const [updateId, setUpdateId] = useState(0);\n  const inputEl = useRef();\n  const modelRef = useRef();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const {\n    handleSubmit,\n    register,\n    errors,\n    watch,\n    setValue\n  } = useForm();\n\n  const users = useSelector(\n    state => state.usersReducer.users\n  , shallowEqual);\n\n  /**\n   * fetch users\n   */\n  const fetchUsers = () => {\n    getUsers().then(res => {\n      dispatch(loadUsers(res))\n      $(inputEl.current).DataTable();\n    });\n  };\n\n  /**\n   * use effects\n   */\n  useEffect(() => {\n    fetchUsers();\n\n    let user = window.localStorage.getItem('user');\n    if (!user) {\n      history.push(\"/\");\n    }\n  }, []);\n\n  /**\n   * add user     \n   * @param {*} values \n   */\n  const addUsers = values => { \n    delete values.cpassword;\n\n    if(modelType === 'Add') {\n      addUser(values).then((res) => {\n        alert('User Added successfully...');\n        fetchUsers();\n        openHideModal('Add','hide');\n      })\n    } else {\n      updateUser(values,updateId).then((res) => {\n        alert('User Updated successfully...');\n        fetchUsers();\n        openHideModal('Update','hide');\n      })\n    }\n  };\n\n  /**\n   * Open hide model\n   * @param {*} modelType \n   * @param {*} type \n   */\n  const openHideModal = (modelType='show',type = 'show') => {\n    $(modelRef.current).modal(type);\n    (modelType === 'show') ? setModelType('Add'): setModelType('Update');\n  }\n\n  /**\n   * update open model\n   * @param {*} data \n   */\n  const updateOpenModel = (data) => {\n    openHideModal('Update','show');\n    setUpdateId(data.id);\n    for(let x in data) {\n      if(x !== 'password')\n        setValue(x, data[x]);\n    }\n  }\n\n  /**\n   * delete single user\n   * @param {*} data \n   */\n  const deleteSingleUser = (data) => {\n    const confirm = window.confirm(\"Are you want delete this user?\");\n    if(confirm) {\n      deleteUser(data.id).then((res) => {\n        alert('User Deleted successfully...');\n        fetchUsers();\n        openHideModal('Update', 'hide');\n      })\n    }\n  }\n\n  /**\n   * log out\n   */\n  const logout = () => {\n    window.localStorage.removeItem('user');\n    history.push('/');\n  }\n\n  return (\n    <>\n      <header>\n        <div className=\"navbar navbar-dark bg-dark box-shadow\">\n          <div className=\"container d-flex justify-content-between\">\n            <a className=\"navbar-brand d-flex align-items-center\">\n              <strong>User Management</strong>\n            </a>\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item text-right\">\n                <a className=\"nav-link\" href=\"#\" onClick={() => logout()}>Log out</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </header>\n      <main className=\"container mt-4 mb-4\">\n        <div className=\"text-right mb-2\">\n          <button type=\"button\" className=\"btn fs-16 btn-outline-primary\" onClick={() => openHideModal()}>Add User</button>\n        </div>\n        <table ref={inputEl} className=\"table fs-16 table-striped table-bordered w-100\">\n          <thead>\n              <tr className=\"text-center\">\n                  <th>Name</th>\n                  <th>Age</th>\n                  <th>Gender</th>\n                  <th>Email</th>\n                  <th>Phone No</th>\n                  <th>Action</th>\n              </tr>\n          </thead>\n          <tbody>\n            {users.map((user,i) => (\n              <tr key={i}>\n                  <td>{user.userName}</td>\n                  <td>{user.age}</td>\n                  <td>{user.gender}</td>\n                  <td>{user.email}</td>\n                  <td>{user.phoneNumber}</td>\n                  <td className=\"text-center\">\n                    <button type=\"button\" onClick={()=> {updateOpenModel(user)}} className=\"btn btn-sm btn-outline-warning\" >Edit</button>\n                    <button type=\"button\" onClick={()=> {deleteSingleUser(user)}}className=\"btn btn-sm btn-outline-danger ml-2\">Delete</button>\n                  </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <div className=\"modal fade\" ref={modelRef}>\n          <div className=\"modal-dialog\">\n            <div className=\"modal-content\">\n              <form onSubmit={handleSubmit(addUsers)} autoComplete=\"off\">\n                <div className=\"modal-header\">\n                  <h5 className=\"modal-title\">{modelType} User</h5>\n                  <button type=\"button\" className=\"close\" data-dismiss=\"modal\">×</button>\n                </div>\n                <div className=\"modal-body fs-16\">\n                    <div className=\"form-group\">\n                      <label htmlFor=\"usr\">User name</label>\n                      <input type=\"text\" name=\"userName\" className=\"form-control\" ref={register({\n                        required: true\n                      })}/>\n                      <p className=\"errors mt-2\">{errors.userName && 'User Name is required'}</p>\n                    </div>\n                    \n                    <div className=\"row\">\n                      <div className=\"col-lg-6\">\n                        <div className=\"form-group\">\n                          <label htmlFor=\"usr\">Age</label>\n                          <input type=\"number\" name=\"age\" className=\"form-control\" ref={register({\n                              required: 'Age is required',\n                              min: {\n                                value: 1,\n                                message : 'Mininum age value is 1'\n                              },\n                              max: {\n                                value: 99,\n                                message: 'Max age value is 99'\n                              }\n                            })}/>\n                            <p className=\"errors mt-2\">{errors.age && errors.age.message}</p>\n                        </div>\n                      </div>\n                      <div className=\"col-lg-6\">\n                        <div className=\"form-group\">\n                          <label htmlFor=\"usr\">Gender</label>\n                          <select className=\"form-control\" name=\"gender\" ref={register({\n                              required: true\n                            })}>\n                            <option value=\"\">Select gender</option>\n                            <option value=\"Male\">Male</option>\n                            <option value=\"Female\">Female</option>\n                          </select>\n                          <p className=\"errors mt-2\">{errors.gender && 'Gender is required'}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"usr\">Email</label>\n                        <input type=\"email\" name=\"email\" className=\"form-control\" ref={register({\n                          required: \"Email id is required\",\n                          pattern: {\n                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                            message: \"Enter valid email id\"\n                          }\n                        })}/>\n                        <p className=\"errors mt-2\">{errors.email && errors.email.message}</p>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"usr\">Phone No</label>\n                        <input type=\"text\" name=\"phoneNumber\" className=\"form-control\" ref={register({\n                          required: \"Phone number is required\",\n                          minLength: {\n                            value: 10,\n                            message: \"Enter valid phone number(Min 10)\"\n                          },\n                          maxLength: {\n                            value: 10,\n                            message: \"Enter valid phone number(Max 10)\"\n                          }\n                        })}/>\n                        <p className=\"errors mt-2\">{errors.phoneNumber && errors.phoneNumber.message}</p>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"col-lg-6\">\n                        <div className=\"form-group\">\n                          <label htmlFor=\"usr\">Password</label>\n                          <input type=\"password\" name=\"password\" autoComplete=\"off\" className=\"form-control\" ref={register({\n                            required: \"Password is required\",\n                          })}/>\n                          <p className=\"errors mt-2\">{errors.password && errors.password.message}</p>\n                        </div>\n                      </div>\n                      <div className=\"col-lg-6\">\n                        <div className=\"form-group\">\n                          <label htmlFor=\"usr\">Confirm Password</label>\n                          <input type=\"password\" name=\"cpassword\" autoComplete=\"off\" className=\"form-control\" ref={register({\n                            required: \"Confirm Password is required\",\n                            validate: (value) => value === watch('password') || \"Confirm Password doesn't match with password\"\n                          })}/>\n                          <p className=\"errors mt-2\">{errors.cpassword && errors.cpassword.message}</p>\n                        </div>\n                      </div>\n                    </div>\n                </div>\n                <div className=\"modal-footer\">\n                  {modelType === 'Add' ? \n                  <button type=\"submit\" className=\"btn btn-success\">Add</button>\n                  :\n                  <button type=\"submit\" className=\"btn btn-success\">Update</button>\n                  }\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default Users;\n","import types from '../reducers/types';\n\n/**\n * Load user\n * @param {*} data \n */\nexport function loadUsers(data) {\n    return {\n        type: types.LOAD_USERS,\n        payload: data\n    }\n}\n","import React, {\n  useEffect\n} from 'react';\n\nimport './Login.css';\n\nimport {\n  useHistory\n} from \"react-router-dom\";\n\nimport {\n  checkUser\n} from \"../../services/UserServices\";\n\nimport {\n  useForm\n} from \"react-hook-form\";\n\n/**\n * Login user\n */\nfunction Login() {\n  const history = useHistory();\n\n  const {\n    handleSubmit,\n    register,\n    errors,\n  } = useForm();\n\n  /**\n   * Use effects\n   */\n  useEffect(() => {\n    let user = window.localStorage.getItem('user');\n    if(user) {\n      history.push(\"/users\");\n    }\n  }, []);\n\n  /**\n   * Do login\n   * @param {*} values \n   */\n  const login = (values) => {\n    checkUser(values.email,values.password).then((res) => {\n      if(res.length === 1) {\n        history.push(\"/users\");\n        window.localStorage.setItem('user',res[0]['id']);\n      } else {\n        alert('Invalid user')\n      }\n    })\n  }\n\n  /**\n   * render \n   */\n  return (\n    <div className=\"container\">\n      <div className=\"row d-flex justify-content-center mt-200\">\n        <div className=\"card w-350 border-0 shadow\">\n          <div className=\"card-body\">\n            <p className=\"text-center\"><b>User Management</b></p>\n            <form onSubmit={handleSubmit(login)} autoComplete=\"off\">\n              <div className=\"form-group\">\n                <label htmlFor=\"usr\">Email:</label>\n                <input type=\"email\" name=\"email\" className=\"form-control\" ref={register({\n                  required: \"Email id is required\",\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: \"Enter valid email id\"\n                  }\n                })}/>\n                <p className=\"errors mt-2\">{errors.email && errors.email.message}</p>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"pwd\">Password:</label>\n                <input type=\"password\" name=\"password\" className=\"form-control\" ref={register({\n                  required: \"Password is required\",\n                })}/>\n                <p className=\"errors mt-2\">{errors.password && errors.password.message}</p>\n              </div>\n              <div className=\"text-center\">\n                <button type=\"submit\" className=\"border-0 btn w-100 btn-primary center\">Login</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>      \n  );\n}\n\nexport default Login;\n","import React from 'react';\nimport './App.css';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nimport Users from '../Users/Users';\nimport Login from '../Login/Login';\n\nfunction App() {\n  return (\n    <>\n        <Router>\n            <Switch>\n                <Route path=\"/users\">\n                    <Users />\n                </Route>\n                <Route path=\"/\">\n                    <Login />\n                </Route>\n            </Switch>\n        </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    users: [ \n    ]\n}\n\nexport default initialState;","import initialState from '../store/state';\nimport types from './types';\n\nconst usersReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.LOAD_USERS:\n            state = {\n                ...state,\n                users: action.payload\n            }\n            break;\n        default:\n            break;\n    }\n\n    return state;\n}\n\nexport default usersReducer;","import { combineReducers } from 'redux';\nimport usersReducer from './Users';\n\nconst rootReducer = combineReducers({\n    usersReducer\n})\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(\n        ),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    )\n)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/datatables.net-bs4/css/dataTables.bootstrap4.min.css';\n\nimport '../node_modules/jquery/dist/jquery.min.js';\nimport '../node_modules/bootstrap/dist/js/bootstrap';\nimport '../node_modules/datatables.net/js/jquery.dataTables.min.js';\nimport '../node_modules/datatables.net-bs4/js/dataTables.bootstrap4.min.js';\n\nimport {\n  Provider\n} from 'react-redux'\nimport store from './store/index'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}